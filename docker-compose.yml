# Docker Compose for Resume Relevance Check System
# Provides complete stack: API, Database, Redis, Worker, and optional ChromaDB

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: resume_checker_db
    environment:
      POSTGRES_DB: resume_checker
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_postgres.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - resume_checker_network

  # Redis for Celery message broker
  redis:
    image: redis:7-alpine
    container_name: resume_checker_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - resume_checker_network

  # FastAPI Application
  api:
    build:
      context: .
      target: production
    container_name: resume_checker_api
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/resume_checker
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - resume_checker_network
    restart: unless-stopped

  # Celery Worker for background tasks
  worker:
    build:
      context: .
      target: production
    container_name: resume_checker_worker
    command: celery -A api.tasks worker --loglevel=info --concurrency=2
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/resume_checker
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    env_file:
      - .env  
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - resume_checker_network
    restart: unless-stopped

  # Celery Beat for periodic tasks (optional)
  celery_beat:
    build:
      context: .
      target: production
    container_name: resume_checker_beat
    command: celery -A api.tasks beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/resume_checker
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    env_file:
      - .env
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - resume_checker_network
    restart: unless-stopped

  # ChromaDB for vector storage (optional)
  chromadb:
    image: chromadb/chroma:latest
    container_name: resume_checker_chromadb
    ports:
      - "8001:8000"
    volumes:
      - chromadb_data:/chroma/chroma
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
    networks:
      - resume_checker_network
    restart: unless-stopped

  # Flower for Celery monitoring (optional)
  flower:
    build:
      context: .
      target: production
    container_name: resume_checker_flower
    command: celery -A api.tasks flower --port=5555
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - resume_checker_network
    restart: unless-stopped

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: resume_checker_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - resume_checker_network
    restart: unless-stopped
    profiles:
      - production  # Only start with --profile production

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  chromadb_data:
    driver: local

# Network for service communication
networks:
  resume_checker_network:
    driver: bridge

# Development override (docker-compose.override.yml)
---
version: '3.8'

# This file is automatically loaded by docker-compose
# for development-specific overrides

services:
  api:
    build:
      target: development
    volumes:
      - .:/app
      - ./uploads:/app/uploads
    command: ["uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    environment:
      - DEBUG=true
      - LOG_LEVEL=DEBUG

  worker:
    build:
      target: development
    volumes:
      - .:/app
      - ./uploads:/app/uploads
    command: celery -A api.tasks worker --loglevel=debug --concurrency=1
